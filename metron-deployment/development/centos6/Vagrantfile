#
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# Customize these global variables
$GOOGLE_PROJECT_ID = "thermal-cathode-276606"
$GOOGLE_JSON_KEY_LOCATION = "~/Downloads/thermal-cathode-276606-8981bcd07875.json"
$LOCAL_USER = "shanu"
$LOCAL_SSH_KEY = "~/.ssh/google_compute_engine"
$NODE_NAME = "testing-vagrant"
$GOODLE_IMAGE = "centos-6-v20200505"
$GOOGLE_MACHINE_TYPE = "n1-standard-8"
$GOOGLE_ZONE = "us-central1-f"
$GOOGLE_DISK_SIZE = 100
$GOOGLE_DISK_TYPE = "pd-ssd"  #Use "pd-standard" for Standard disks

require 'getoptlong'

ansibleTags=''
ansibleSkipTags='sensors'

begin
   opts = GetoptLong.new(
     [ '--ansible-tags', GetoptLong::OPTIONAL_ARGUMENT ],
     [ '--ansible-skip-tags', GetoptLong::OPTIONAL_ARGUMENT ]
   )

   opts.quiet = true

   opts.each do |opt, arg|
     case opt
       when '--ansible-tags'
         ansibleTags=arg
       when '--ansible-skip-tags'
         ansibleSkipTags=arg
     end
   end
rescue Exception => ignored
#Ignore to allow other opts to be passed to Vagrant
end

puts " Running with ansible-tags: " + ansibleTags.split(",").to_s if ansibleTags != ''
puts " Running with ansible-skip-tags: " + ansibleSkipTags.split(",").to_s if ansibleSkipTags != ''

hosts = [{
    hostname: $NODE_NAME
}]

Vagrant.configure(2) do |config|

  config.vm.box = "google/gce"

  config.vm.provider :google do |google, override|
    google.google_project_id = $GOOGLE_PROJECT_ID
    google.google_json_key_location = $GOOGLE_JSON_KEY_LOCATION

    # Override provider defaults
    google.name = $NODE_NAME
    google.image = $GOODLE_IMAGE
    google.machine_type = $GOOGLE_MACHINE_TYPE
    google.zone = $GOOGLE_ZONE
    google.disk_size = $GOOGLE_DISK_SIZE
    google.disk_type = $GOOGLE_DISK_TYPE
    google.metadata = {'custom' => 'metadata', 'testing' => 'foobarbaz'}
    google.tags = ['vagrantbox', 'dev']

    override.ssh.username = $LOCAL_USER
    override.ssh.private_key_path = $LOCAL_SSH_KEY
  end

  # enable the hostmanager plugin
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = false

  # enable vagrant cachier if present
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.enable :yum
    config.cache.scope = :box

    config.cache.synced_folder_opts = {
      # type: :nfs,
      mount_options: ['rw', 'vers=3', 'tcp', 'nolock']
    }
  end

  # host definition
  hosts.each_with_index do |host, index|
    config.vm.define host[:hostname] do |node|

      # host settings
      node.vm.hostname = host[:hostname]
    end
  end

  # provision the host with ansible
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "ansible/playbook.yml"
    ansible.become = true
    ansible.tags = ansibleTags.split(",") if ansibleTags != ''
    ansible.skip_tags = ansibleSkipTags.split(",") if ansibleSkipTags != ''
    ansible.inventory_path = "ansible/inventory"
    ansible.compatibility_mode = "auto"
    ansible.raw_arguments  = [
    ]
  end
end
